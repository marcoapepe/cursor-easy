Backend

Let's setup the backend to connect to a PostGres instance

instance: PostgreSQL 15
host: localhost
port: 5432
username: postgres
password: postgres

this database contains one table:

CREATE TABLE T_CONTRIBUINTE (
	ref_id SERIAL PRIMARY KEY,
	dat_proce DATE NOT NULL,
	cpf_cnpj VARCHAR(14) NOT NULL,
	cliente VARCHAR(80) NOT NULL,
	email VARCHAR(255) UNIQUE,
	dat_cadastro DATE 
);

adapt the code generate using this table for the CRUD. 

the object (class) in the Python code will be called contribuinte.  

this object contribuinte will be linked to the Postgres table T_CONTRIBUINTE.

Please make the changes in the code for this contribuinte class. 


Please remove class User and all its dependencies that were generated by default. Keep only contribuinte that is the main business object of this project.

I already dropped the table T_CONTRIBUINTE and create a new table with name contribuinte. Please make the changes in the code to replace the references to T_CONTRIBUINTE to new contribuinte table.

entrar no diretorio backend
python start.py
# or
uvicorn main:app --reload --host 0.0.0.0 --port 8000

Add a new router (endpoint) contribuinte_by_date.  This method will pull all contribuinte table record for the specific dat_proce that was passed by parameter.

Frontend

Now that our backend is ready to handle CRUD in the contribuinte table, let's focus on the frontend project. 

The frontend project is built in React JS.

The main page should show the project name "Easy Interfaces".

On the main page, we should have the following options where the user can select:
- Contribuinte
- e-Financeira
- DARF

The second and third options will be handled later. If user clicks on these two options, the system should show a page "working in progress..."

For the first option, Conribuinte, the system should show a page that shows the data in contribuinte table. 
There will be a date field where the user can select the date.
This date will be referred to dat_proce of contribuinte table. 
If user select a date, the system has to filter the contribuinte table and pull all records of dat_proce date. 
By default, the page should show any date and no results on screen. 
The screen needs a grid of all columns of contribuinte table.
The respective backend endpoint is 
Add a new router (endpoint) contribuinte_by_date.  This method will pull all contribuinte table record for the specific dat_proce that was passed by parameter.
Show the result on the grid.
That's it.

entrar no diretorio frontend
npm start


github
ssh-keygen -t rsa
cat ~/.ssh/id_rsa.pub

git 

git push -u origin master


Add a new endpoint the records from contribuinte table where client field like the string parameter.
Example: Given the string "Pepe", it should bring all contribuinte rows with like "%Pepe%" in client field.

in the frontend, on Contribuinte table, add two more filter fields at the top side by side with the current date field.
First field, CPF/CNPJ text field where user can filter all contribuintes by cpf_cnpj 
using this endpoint of backend project:
@router.get("/cpf/{cpf_cnpj}", response_model=schemas.Contribuinte)
def read_contribuinte_by_cpf(
    cpf_cnpj: str,
    db: Session = Depends(get_db)
):

The second field with name Client Name, a text field, the user can type part of the client name.
this filter will can the new endpoint just created in the backend called:
@router.get("/by-client/{client_name}", response_model=List[schemas.Contribuinte])
def read_contribuintes_by_client(
    client_name: str,
    db: Session = Depends(get_db)
):

The ContribuintePage will have 3 fields to filter. 
If date is choosen, the other 2 fields should be put in blank. 
Only one field at the time can be selected. 
If a cpf_cnpj is typed by the user, the other 2 fields should be blank. 
After filtering on any of these 3 fields, result should be shown on the grid.

Now let's enhance the other working in progress page called DARF page.
This DARF page can be acessed through the main page. 
The DARF Page needs to have the following feature:
User can upload or drag and drop csv files like this:
novos_contribuintes.txt
it has this example of content. Two records, csv, with ; character as delimiter
2025-07-06;77845896512;Rodrigo Pepe;rodrigo@uol.com.br;2025-06-02
2025-07-06;55544433312;Eric Pepe;eric@bol.com.br;2025-06-02
After uploading the file on screen, the page should add the records in contribuinte table.
This file has the columns of contribuinte table:
	dat_proce DATE,
	cpf_cnpj VARCHAR(14),
	cliente VARCHAR(80),
	email VARCHAR(255),
	dat_cadastro DATE 
So the page should have two options:
1. Upload file (or drag and drop)
2. Process file (that will save the records of the file into contribuinte table)
The process file needs to call the backend using the existing put or post methods.
Or create a new endpoint in the backend to handle this process.	

in the frontend, let's remove the working in progress option and page for e-Financeira. 
The main page will have only two options:
- Contribuinte
- DARF
But I want to replace the name DARF by Upload. Change all references to DARF in the project.
That means rename DARFPage.css and DARFPage.js to UploadPage.
I don't want to see any page or code with the name DARF. I want to see Upload instead.

Now we will make a significant change on the database.
Disregard the current database connection.
And we will have two new databases in the instance:
database1 on 
instance: PostgreSQL 15
host: localhost
port: 5432
username: postgres
password: postgres
and 
database2 on 
instance: PostgreSQL 15
host: localhost
port: 5432
username: postgres
password: postgres

The system will have two modules:
1. Module A
2. Module B
The Module A will connect to database1 and Module B will connect to database2.

In the backend project, in router contribuinte.py, modify all endpoints to accept 
a new parameter to tell which module and therefore which database to use.
Example: module = "A"  that refers to Module A and database1

Later on fronted, we will create one ratio button on screen where the user will select the module.


Now that we changed the backed to accept to modules: A and B, let's make the changes on the screen.
On ContribuintePage, add a new field at the top right where the user will select the module A or B.
This field will have Module A or Module B options.  Module A will be the default option.
Base on that, all requests to the backend endpoints will have to inform the module. Or A or B. 
The other filter fields will continue with the same behaviour.